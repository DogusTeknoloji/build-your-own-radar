name;ring;quadrant;isNew;description
Sevi Mimari Tasarım Kayıtları (LADR);Benimse;Teknikler;FALSE; Geleneksel kurumsal mimari anlayışına alternatif olarak hızla gelişen ve değişen mimari tasarım dünyasında, yol boyunca alınan belirli mimari kararları gelecekteki takım üyelerinin yanı sıra dış gözlem için de kaydetmek önemlidir. <a href="http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions">LADR</a> kendi bağlam ve sonuçları ile birlikte önemli mimari kararları dokümante etmek için bir tekniktir. Bu kayıtların, bir wiki ya da web sitesi yerine source control'de tutmanızı öneririz.
Service Design Canvas;Benimse;Teknikler;TRUE; Service Design Canvas, Domain uzmanlarının da katılımları ile yapılan Event Storming çıktılarını anlamlı ve düzenli bir şekilde saklamak için kullanılır.
Event Storming;Benimse;Teknikler;FALSE;<a href="https://medium.com/@onselakin/event-storming-etkili-ve-e%C4%9Flenceli-bir-domain-modelleme-aktivitesi-d818b1b5e6f7">Event Storming</a>, bir domain içinde gerçekleşen süreçlerin tanımlanması için uygulanan workshop tarzında bir aktivitedir. İş uzmanları, geliştiriciler ve analistlerin de bulunabileceği, bilgisayar gerektirmeyen ve iş süreçlerinin kolayca anlaşılabilmesini sağlayan bir modelleme yöntemi olan Event Storming'in tüm projelerde kullanılmasını tavsiye ediyoruz.
Unit Test Geliştirme;Benimse;Teknikler;FALSE;<a href="https://docs.microsoft.com/en-us/dotnet/core/testing/">Unit Testler</a>, metotları ve yazılım bileşenlerini soyutlanmış olarak test etmede kullanılır. Bunlar en alt seviyedeki testlerdir. Yazılımcı için önemi, 'Kodlarınız Unit Test yazmayacak kadar değersiz mi?' vurgusuyla dile getirilir.
Pair Programming;Benimse;Teknikler;FALSE;<a href="https://www.infoq.com/news/2009/01/Pair-Programming-Code-Review">Pair Programming</a>, kodların iki yazılımcının aktif katkısıyla yazılmasıdır. Bu yöntemle iki yazılımcı interaktif olarak kod tasarımı, organizasyonu, incelemesi ve değişikliği yapabilir.
Code Review;Benimse;Teknikler;FALSE;<a href="https://www.infoq.com/news/2009/01/Pair-Programming-Code-Review">Code Review</a>, bir kişi tarafından yazılan kodların diğerleri tarafından pasif olarak değerlendirilmesidir. Kodlarda gözle görülebilecek hataları bulmakta ve yetkinliğin ekip geneline yayılmasında faydalı olmaktadır.
Domain Driven Design;Benimse;Teknikler;FALSE;<a href="https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215">DDD</a>, sürekli gelişen, evrimleşen uygulama modelinin birbirleriyle ilişkili parçalara ayrılmasını kolaylaştırmayı hedefleyen bir domain modelleme yöntemidir. Mikroservis mimarilerinde, servis sınırlarının <i>Bounded Context</i> kavramı ile belirlenebilmesi açısından kullanılması tavsiye edilmektedir.
İstemci Taraflı Sorgu;Deneyimle;Teknikler;FALSE; Sunucu tarafında geliştirilen servisleri tüketen istemcilerin artmasıyla çok farklı isteklere yanıt verebilmek çok fazla geliştirme yapma ve ayrı metodlar oluşturma ihtiyacı doğdu. Yeni benimsenen yaklaşımlar ile istemciler daha kapsamlı bir sunucu metodunu ihtiyaçlarına göre özelleştirerek kullanma eğilimindeler. Bu kütüphanelere eskilerden OData ya da yeni yaygınlaşan GraphQL örneklerini verebiiriz.
Hobi Projesi Geliştirme;Deneyimle;Teknikler;FALSE; Her yazılım geliştiriciye, yeni teknolojileri, araçları, platformları, deneyimleyebilmesi için, ilgisini çeken bir konuya odaklı hobi projeleri ile uğraşmalarını tavsiye ediyoruz.
Microservices;Deneyimle;Teknikler;FALSE; Sürekli karmaşıklaşan iş gereksinimleri, dikey ölçeklenebilirlikteki donanım sınırları, tek bir teknoloji seçiminin tüm sorun kümesi için çözüm oluşturmada kullanılamaması yazılım dünyasını Microservis yaklaşımına yöneltti. Dağıtık çalışabilen yeni sistemlerin yardımıyla Microservisler ile büyük projeler küçük servislere bölünebilir ve sorun için en uygun teknolojik tercihler ile farklı ekipler ile geliştirilebilir hale geldi.
Micro ORM;Deneyimle;Teknikler;FALSE; Micro ORM'ler, genel olarak ORM'lerin sahip olduğu caching, concurrency control, change tracking vb. gibi gelişmiş ve kısmen karmaşık özelliklere sahip olmayan, çok daha basit, yalın ve sadece sorguları veritabanı nesneleriyle eşleme ile görevli yapılardır. Sorgulara tam hakimiyet, basitlik ve hızlı çalışma sağladığı faydalar arasında sayılabilir. Proje gereksinimlerine göre ORM veya Micro ORM kullanımı iyi değerlendirilmelidir. Hız çok kritikse, SQL yazmak sorun oluşturmuyorsa veya tercih ediliyorsa, karmaşık bir veritabanı yapısı yoksa Micro ORM'ler tercih edilebilir.
Test Driven Development;Deneyimle;Teknikler;TRUE;<a href="https://deviq.com/test-driven-development/">TDD</a>, kod yazılmadan önce test senaryolarının yazılması, bu senaryolara bağlı olarak kodun yazılması ve refactor edilmesi tekniğidir. TDD yaklaşımıyla, yazılması planlanan kodun test senaryoları, sürekli olarak koşturulabilir ve bu sayede programın daha az hata ile geliştirilmesi sağlanabilir. Bu yaklaşımı uygulayan bir yazılımcı kodlarını unit testleriyle beraber geliştirir.
Sevi Distributed SAGA Pattern;Deneyimle;Teknikler;TRUE; Dağıtık mimaride lokal transactionların koordineli olarak oluşturduğu iş kuralı serisi olan <a href="https://microservices.io/patterns/data/saga.html">Sagaları</a>, monolithlerdeki 2PC'lerin yerine değerlendirmenizi öneririz.
Sevi Eventual Consistency;Değerlendir;Teknikler;TRUE;Geleneksel yazılım yaklaşımlarını yoğun şekilde yönlendiren ACID uyumlu platformların global bir transaction sayesinde sağladığı veri tutarlılığı, dağıtık mimarilerde Eventual Consistency-nihai tutarlılık- anlayışına evrilmiştir. Katı bir transactional tutarlılık yerine, özellikle dağıtık bileşenlere sahip uygulamalarınızda <a href="https://www.pluralsight.com/tech-blog/leaning-into-eventual-consistency"></a>eventual consistency değerlendiriniz.
Sevi CQRS;Değerlendir;Teknikler;TRUE;CRUD bakış açısının yeterli olmadığı kompleks domainler için, özellikle de veriyi okumak zorlaştıysa (örn. farklı servislerdeki verilerin birleştirilmesi veya tek serviste de olsa çoklu kayıtların tek kayda düşürülmesi gerekiyorsa) önerilen çözümlerden biri <a href="https://martinfowler.com/bliki/CQRS.html">CQRS</a> patternidir. Komutlar ve okumalar için uygulamanın farklı iki parçasının sorumlu olması şeklinde özetlenebilir. Bu pattern uygulandıktan sonra mimari açıdan pek çok fırsat mümkün olmaktadır.
Event Sourcing;Değerlendir;Teknikler;TRUE; Sevi
Teknik Paylaşımlar (Brown Bag Sessions);Değerlendir;Teknikler;TRUE; Genellikle öğle arasında, eğitici amaçla herhangi bir konuda paylaşım yapılan kısa süreli etkinliklerdir. Önceden belirlenmiş konulara bir veya birkaç kişi çalışarak/tecrübe ederek ilgili zaman diliminde diğer arkadaşlarıyla izlenimlerini/bilgilerini paylaşır.
Behavior Driven Development;Değerlendir;Teknikler;TRUE;<a href="https://medium.com/@TechMagic/get-started-with-behavior-driven-development-ecdca40e827b">BDD</a>, TDD yaklaşımına ek olarak metotların gerçekleştirim detayları yerine senaryoların test edilmesini gözetir. Bu sayede unit testlerin kod gerçekleştirim detaylarına bağımlılığı azaltılmış olur.
Progressive Web Applications;Değerlendir;Teknikler;TRUE; <a href="https://developers.google.com/web/progressive-web-apps">PWA</a>, kullanıcılara masaüstü uygulama benzeri bir deneyim sunmak için modern web yeteneklerini kullanan bir web geliştirme yaklaşımıdır. Bu uygulamalar tarayıcılarda önbelleklebilir ve internet erişimi olmadığında da kullanıcı dostu bir arayüz sağlayabilirler. Ayrıca masaüstüne kısayolları oluşturulabilir ve bir native uygulama gibi kolay erişim sağlanabilir.
Stored Procedure gibi veritabanı bileşenlerinde iş kuralları geliştirmek;Kaçın;Teknikler;FALSE; Eskilerden gelen bu alışkanlığın oldukça tehlikeli sonuçları olduğu görüldüğünden, "Stored Procedure", "User-Defined Function" vb. veritabanı ögelerinde iş kurallarının yer almasından kaçınılmalıdır. Veritabanları, verilerin saklandığı yapılardan öteye gitmemeli, başka görevler üstlenmemelidir.
Fazla soyutlamayı basitliğe tercih etmek;Kaçın;Teknikler;FALSE; "Gereksiz ve erken optimizasyon tüm kötülüklerin anasıdır" felsefesini benimsemek ve her zaman çözmek istediğimiz problemlere odaklanmak bireysel ve kurumsal verimliliğimizi arttıracağı gibi motivasyona da olumlu etkisi olacaktır. Her zaman tek bir doğru olmadığını da akılda bulundururken "Buna <b>şimdi</b> ihtiyacımız var mı?", "Desteklemek istediğim bu yetenek <b>ne kadar</b> değer katacak" gibi soruları kendimize sormalıyız. YAGNI ve KISS bizim özümsediğimiz yaklaşımlar ve Albert Einstein'a atıf edilmiş şu söze katılıyoruz: "Everything should be made as simple as possible, but not simpler."
Platform soyutlamalarını tekrar soyutlamak;Kaçın;Teknikler;FALSE;Geliştirme platformları içindeki soyutlanmış yapıların üzerine uygulama katmanı seviyesinde tekrar soyutlama yapıları eklemek olarak tanımlanan bu yöntemden kesinlikle kaçınmalısınız. Bu duruma örnek olarak .Net Core içinde gelen IConfiguration, ILogger gibi arayüzlerin üzerine, uygulamaya özel yeni soyutlama arayüzleri eklemek verilebilir. Yeni bir soyutlama katmanı geliştirmek yerine, platform üzerinde hazır gelen soyutlamaların neden yapıldığını, bunların nasıl kullanılabileceğini anlamak ilk amaç olmalıdır. 
.Net Core;Benimse;Platformlar;FALSE; İlk çıktığı 2016 yılından bu yana hızla popülerliği artan .Net Core, sürekli gelişim halinde, aktif bir açık kaynak topluluğu olan, üretim ortamı olgunluğu yeterli bir platform haline geldi. Baştan aşağı yeniden ele alınarak geliştirilen, .Net Framework'ün hantallıklarından kurtulmuş, hafif, açık kaynak, bulut uyumlu, platform bağımsız, modüler olarak tasarlanan .Net Core kullanımını, sunucu taraflı uygulama geliştirmeleri için tavsiye ediyoruz. <a href="https://docs.microsoft.com/tr-tr/dotnet/core/">Resmi .Net Core dokümantasyonunu</a> oldukça öğretici ve takibi kolay buluyoruz, incelenmesini özellikle öneririz.
Single Page Application;Benimse;Platformlar;FALSE;Browser içinde, tekrar sayfa yüklemeden çalışan uygulamalara Single Page Application ismi verilmektedir. Hızlı çalışmaları, offline çalışmaya uygun olmaları, kullanıcıya masaüstü bir uygulamaya benzer bir deneyim sunmaları açısından geleneksel sunucu uygulamaları yerine tercih edilmelidirler.
Client Side - MVVM;Benimse;Platformlar;FALSE; Umut 
Sevi Azure DevOps (VSTS);Benimse;Platformlar;FALSE; SDLC süreçlerini Agile bakış açısı, yeni teknolojiler ve açık kaynak ürünler ile çevreleyerek sunan Microsoft'un yeni DevOps ürünü <a href="https://azure.microsoft.com/en-us/blog/introducing-azure-devops/">Azure DevOps'un</a> (eski adıyla VSTS), yazılım geliştirme ve deployment süreçlerini hızlandırmak isteyen takımlar tarafından kullanılmasını şiddetle tavsiye ediyoruz.
Sevi Docker;Benimse;Platformlar;FALSE;<a href="https://www.docker.com/why-docker">Docker</a> uygulama geliştirme, deployment ve çalıştırmayı izole konteynerler içerisinde otomatize edilmesini sağlayan bir açık kaynak projedir. Konteynerler, bir uygulamanın işletim sistemi seviyesine inecek şekilde ihtiyaç duyduğu parçalarını, bir paket halinde birleştirip çalıştırabilmeyi sağlar.
PostgreSQL;Benimse;Platformlar;TRUE; Açık kaynak veritabanları arasında en gelişmiş ilişkisel veritabanı <a href="https://www.postgresql.org/">PostgreSQL</a>'i, RDBMS ile ilerlenecek projelerde birinci tercih olarak öneriyoruz. 
Merkezi Loglama İçin Graylog/Elastic/Kibana;Benimse;Platformlar;TRUE; Microservice çözümlerinin yaygınlaşması önceden tek bir sunucudan toplanan log kayıtlarının birçok server üzerinden takip edilmesi ihtiyacını doğurdu. Docker ve konteynerlerin kullanımlarının artması da insanların log kayıtlarını aktarmak için STDOUT ve STDERR stream'lerini tekrar hatırlamasıyla sonuçlandı. Bu teknolojik gelişmeler ışığında bizim tavsiyemiz Graylog formatındaki loglarımızı fluentd ya da logstash gibi bir araç ile Elastic sunucularına ulaştırarak merkezi bir ortamda saklamak. Bu kayıtları takip etmek için de Kibana ve Grafana gibi araçlar bize ideal görsel yardımı sağlıyorlar.
Redis;Benimse;Platformlar;FALSE;Redis, veritabanı, cache ve message broker olarak da kullanılabilen açık kaynak kodlu bir in-memory veri deposudur. Cache kullanımı gerektiren uygulamalarda tercih edilmelidir.
mongoDB;Benimse;Platformlar;FALSE;mongoDB, bir şemasız (NoSQL/Document) veritabanı sistemidir. Yoğun ilişkisel veri saklanma ihtiyacı olmayan, ya da dinamik ve değişken veri saklama ihtiyacı olan projelerde tercih edilmelidir.
MySQL;Deneyimle;Platformlar;TRUE; Açık kaynak veritabanları arasında en popüler olan <a href="https://www.mysql.com/">MySQL</a>, basit veritabanı işlemleri ile ilerlenecek, çok karmaşık yapıya sahip olmayan projelerde deneyimlenebilir.
Github;Deneyimle;Platformlar;FALSE; Günümüzde üretilen her üründe kaçınılmaz olarak kullanılan açık kaynak kütüphaneler, insanoğlunun yazılım dünyasını daha iyi bir hale getirmek için başlattığı bir ütopik çalışma gibi. Bu hareketin bir parçası olmamak artık kabul edilemez hale geldi. Microsoft yakın zamanda hedefinin tamamen açık bir firma haline gelmek olduğunu açıklamışken, bir çok şirket de işe alım süreçlerinden profesyonel ürün geliştirmesine açık kaynak dünyasını ve bu dünyanın amiral gemisi GitHub'ı kullanıyor.
Elastic;Deneyimle;Platformlar;FALSE;<a href="https://www.elastic.co/">Elastic</a>, açık kaynak kodlu, dağıtık, ölçeklenebilir ve çok yüksek performanslı bir arama motorudur. Text ağırlıklı aramalarda tercih edilmelidir.
Sevi Azure;Deneyimle;Platformlar;FALSE;Microsoft'un sürekli genişleyen farklı servisleri ile bulut hizmeti Azure'u, değişen teknoloji ihtiyaçlarınızı deneyimlemek ve uygulamalarınızı buluta uygun bir şekilde tasarlayacak oyun alanını hazır şekilde bulmak üzere kullanabilirsiniz.
Sevi Kubernetes;Deneyimle;Platformlar;FALSE;<a href="https://kubernetes.io/">Kubernetes</a> bir cluster üzerine dağıtılmış konterneylerde koşan iş yükü, uygulama ve servislerin orkestrasyonu için kullanılan açık kaynak bir sistemdir. Docker Community Edition içerisinde artık hazır gelmesi ve endüstri standardı olma yolunda ilerlemesi nedeniyle deneyimlemenizi öneririz.
Testinium;Deneyimle;Platformlar;TRUE;<a href="https://testinium.com/">Testinium</a>, BDD yaklaşımı ile test yazmak, test senaryolarını çalıştırıp raporlamak gibi amaçlarla kullanılan ve bulutta çalışabien bir uygulamadır. Saha BT firması tarafından geliştirilen bir üründür.
Node.js;Deneyimle;Platformlar;FALSE; Chrome V8 JavaScript motoru üzerine inşa edilmiş bir sunucu taraflı uygulama geliştirme platformudur. Node.js, aynı zamanda frontend uygulama geliştirme aşamasında tercih edilen paket yönetim araçlarını da sunmaktadır. Hem sunucu, hem de istemci uygulamalar geliştirirken tercih edilebilecek bir alternatif olarak düşünülebilir.
Sevi AWS;Değerlendir;Platformlar;TRUE;2006'daki ilk günlerinden beri bulut platformu sektörünü domine etmesi ile bilinen <a href="https://aws.amazon.com/">Amazon Web Service</a>, 200'den fazla ürün, araç ve uygulama desteği ile halen rakiplerinden önde görünmektedir.
Sevi Google Cloud;Değerlendir;Platformlar;TRUE;50+ kadar hizmeti ile <a href="https://cloud.google.com">Google Cloud</a>, rakiplerinin arasında YouTube ve Gmail gibi sektörün devi olan kendi ürünlerinde kullandığı infrastructure'ı sunması ile dikkat çekiyor. Platformlarındaki farklı ürünler ile birbirlerinin önüne geçmeye çalışan bulut hizmet sağlayıcılarının her birini deneyimleyip fikir edinmek gerekiyor.
Azure Functions;Değerlendir;Platformlar;TRUE;Sunucusuz uygulama geliştirme yöntemleri son zamanlarda popülerlik kazanmıştır. Microsoft'un bu yöntem için sunduğu Azure Functions platformu, konfigüre edilebilen olaylarla tetiklenen ve isteğe göre birbirlerinden bağımsız olarak ölçeklendirilebilen fonksiyonların geliştirilebilmesine olanak vermektedir. Daha etkin maliyetlendirme özelliklerinden de ötürü geleneksel WebAPI uygulamalarına alternatif olarak düşünülebilir.
CockroachDB;Değerlendir;Platformlar;TRUE; <a href="https://www.cockroachlabs.com/">CockroachDB</a>, bir ilişkisel veritabanın tüm güzel yönlerini hazır desteklenen dağıtık çalışabilme yeteneğiyle hizmetimize sunuyor. Dağıtık ortamda ACID çalışabilmesi, cloud native yapısı, yüksek ölçeklenebilirliği ve sağlam yapısı değerlendirilmesini kaçınılmaz hale getiriyor.
WebAssembly;Değerlendir;Platformlar;TRUE; <a href="https://webassembly.org/">WebAssembly (Wasm)</a>, tarayıcılar için geliştirilmiş low-level binary ve yazı formatıdır. C/C++/Rust gibi dillerle yazılmış kodların derlenip tarayıcıda çalışabilmesini sağlamaktadır. Şu an gelişme aşamasında olan ama gelecekte sıkça kullanılacak bir teknoloji olacağını öngördüğümüzden şimdiden değerlendirmenizi, gelişimini takip etmenizi tavsiye ediyoruz.
Blazor;Değerlendir;Platformlar;TRUE; <a href="https://blazor.net/">Blazor</a> Microsoft'un, şu an deneysel olarak ilerleyen açık kaynak Webassembly çözümüdür. Razor sytnax'i ile kolayca aşina olunabilecek bir yapıya sahiptir. Bu projeyi de takip etmenizi ve değerlendirmenizi tavsiye ediyoruz.
Selenoid;Değerlendir;Platformlar;TRUE;<a href="https://aerokube.com/selenoid/latest/">Selenoid</a>, Selenium ile yazılan UI test otomasyonlarını Docker ile containerized bir şekilde ve bulutta dağıtık olarak çalıştırılmasını sağlayan açık kaynak bir üründür. Selenoid çalışan testleri izleme ve video kayıt yapma desteği de vermektedir.
MS SQL Server;Kaçın;Platformlar;FALSE; Yetkinlik, olgunluk anlamında hiçbir problemi olmamasına rağmen lisans maliyetleri nedeniyle olabildiğince MS SQL Server kullanılmaması gerekli. MS SQL Server'a özgü bir gereksinim, kullanım yoksa PostgreSQL veya MySQL alternatiflerini değerlendirilmeli.
Web Forms;Kaçın;Platformlar;FALSE; Web sayfalarının Windows ekranları gibi görünmesini sağlamak hedefiyle yola çıkılarak geliştirilmiş, güncelliğini yitirmiş, "View State", "Page Lifecycle" gibi kötü paratikler içeren Web Forms yaklaşımı ile proje geliştirmekten kaçınılmalı. 
Visual Studio Code;Benimse;Araçlar;FALSE; Visual Studio ve muadillerinin gittikçe hantallaşan yapısı yazılım dünyasında IDE kullananlar ve Notepad++, Vim gibi editörler kullananlar olmak üzere ikiye ayrılmayla sonuçlandı. GitHub'ın <a href="https://atom.io">Atom</a> projesinden esinlenen <a href="https://code.visualstudio.com/">Visual Studio Code</a> ise Omnisharp gibi binlerce eklentinin de desteğiyle neredeyse yeryüzünde bulunan tüm geliştirme seçenekleri için bütükleşik ve çok keyifli bir tecrübe sağlıyor.
Git;Benimse;Araçlar;FALSE;<a href="https://git-scm.com/">Git</a>, ilk olarak Linus Torvalds tarafından geliştirilen kaynak kod yönetim sistemidir. Açık kaynak bir üründür. Hafif, hızlı ve dağıtık yapıda çalıştığı için tercih edilir.
Postman;Benimse;Araçlar;FALSE;<a href="https://www.getpostman.com/">Postman</a> bir Google Chrome uygulamasıdır. Bir GUI aracılığıyla HTTP API servislerle interaktif iletişim kurma ve özelleştirilmiş Request/Response oluşturma desteği verir. Postman, Test Script oluşturma desteği sayesinde Test Otomasyonları için çok tercih edilen bir ürün haline gelmiştir.
Sevi Kong;Benimse;Araçlar;FALSE;Her infrastructure üzerinde çalışabilen bir API Gateway olan <a href="https://konghq.com/">Kong</a>, scale edilebilir olması ve core platformunun yanında sunduğu pluginlerinin getirdiği modülerliği ile güçlü bir orta katman çözümü sunar. Production ortamlarındaki güvenilirliği izlenmiş olup, yaygınlaştırılabilir.
Kibana;Benimse;Araçlar;FALSE;ElasticSearch üzerinde depolanan verinin özel sorgularla incelenebilmesini, dashboard konsepti ile sunulmasını sağlayan aracın kullanılması tavsiye edilmektedir.
RabbitMQ;Deneyimle;Araçlar;FALSE; <a href="https://www.rabbitmq.com/">RabbitMQ</a>, gittikçe yaygınlaşan dağıtık çalışma ve ayrık bileşenler gibi microservis yaklaşımlarının doğurduğu mesajlaşma gereksinimini gideren en ideal ürün haline geldi. Hafif mimarisi, kolay kullanımı, hızı, AMQP desteği, yüksek ölçeklenebilirliği ve ayırt edici bir çok özelliği 35.000 canlı ortam kullanımıyla en popüler mesajlaşma platformu olmasını sağladı.
Yarn;Deneyimle;Araçlar;TRUE; <a href="https://yarnpkg.com/">Yarn</a> paket yönetim sistemi <a href="http://npmjs.com">npm</a> ile hep eksikliğini hissettiğimiz paralel paket yükleme, yükleme sonrası otomatik kod çalıştırma, çoklu kaynak desteği ve otomatik tekrar deneme gibi bir çok özelliği ekliyor. Tüm bunları tamamen npm uyumlu bir şekilde yapıyor, package.json dosyasında bir değişiklik gerektirmiyor.
OpenCover;Benimse;Araçlar;FALSE;<a href="https://github.com/OpenCover/opencover">OpenCover</a>, .NET için Code Coverage hesaplamada kullanılan bir açık kaynak araçtır.
AxoCover;Benimse;Araçlar;TRUE;<a href="https://github.com/axodox/AxoCover">AxoCover</a>, OpenCover ile Code Coverage hesaplamak için GUI desteği veren açık kaynak bir Visual Studio eklentisidir. OpenCover için kolay kullanım sağlaması nedeniyle popüler olmuştur.
Coverlet;Deneyimle;Araçlar;TRUE;<a href="https://github.com/tonerdo/coverlet?WT.mc_id=-blog-scottha">Coverlet</a>, .NET Core için Code Coverage hesaplama kütüphanesidir. Çok sayıda çıktı formatını desteklediği için tercih edilen bir açık kaynak araçtır.
Sevi PowerBI;Deneyimle;Araçlar;TRUE;Yazılım servisleri, uygulamalar ve connector'ler bütünü olarak hizmet vererek, farklı tip ve ortamlardaki verileri alıp, anlamlı ve görsel iş zekası çıktılarına çevirmeyi sağlayan <a href="https://docs.microsoft.com/en-us/power-bi/power-bi-overview">PowerBI</a>'ın SaaS hizmeti ücretli olsa da, PowerBI Desktop ücretsiz ve incelemeye değer bir ürün. Self servis ve görselliği yüksek iş zekası ihtiyaçları için gitgide dikkat çeken bir platformdur.
Sketch ile Prototipleme;Değerlendir;Araçlar;TRUE; <a href="https://www.sketchapp.com/">Sketch</a>, olabildiğince agile olduğumuz bu günlerde fikirler ve projelerimize olabildiğince erken geri-bildirim alabilmemiz için çok önemli olan prototipleme için mükemmel bir ortam sağlıyor.
Apache Kafka;Değerlendir;Araçlar;TRUE; Gerçek zamanlı veri akışı işleme aracı ve CQRS/Event Sourcing uygulamalarında "Single source of truth" kavramı çerçevesinde tüm olaylar için bir veri deposu olarak kullanılması tavsiye edilmektedir.
Prometheus;Değerlendir;Araçlar;TRUE; "<a href='https://prometheus.io/'>Prometheus</a> açık kaynak bir izleme (monitoring) ve uyarma (alerting) aracıdır. <a href='https://www.cncf.io/'>Cloud Native Computing Foundation (CNCF)</a> tarafından 'mezun' (graduate) statüsüne alınmış ikinci projedir."
C# 7;Benimse;Diller & Kütüphaneler;FALSE; C# geliştirmeleri sürekli devam ederken yazılımcıların yetişmekte zorluk çektikleri gözlerden kaçmıyor. Bazı ekipler bu yeniliklere temkinli yaklaşsalar da hem verimliliği arttıran hem de kod yazmayı daha da keyifli hale getiren, <b>out variables, tuples, pattern matching, local functions<b> gibi bir çok yeniliği içeren <a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7">C# 7</a> sürümünü artık herkesin benimsemesi, kullanması hatta varolan kodlarını güncellemesi gerektiğini düşünüyoruz. Hatırlatalım, 7.3 versiyonu da kullanımda ve 8 yakında geliyor.
TypeScript;Benimse;Diller & Kütüphaneler;FALSE; <a href="http://typescriptlang.org">TypeScript</a>, JavaScript geliştiricileri başta olmak üzere dünya standardı olarak kabul edilmiş durumda. ECMA standartlarından uzaklaşmadan JavaScript süperseti olmayı sürdüren TypeScript, <b>tip güvenliği, genericler, interface'ler, hedefe göre kod üretebilme</b> gibi yeteneleriyle vazgeçilmez oldu. CoffeeScript, Babel, Flow gibi alternatiflerin kullanımındaki inanılmaz azalma ve Angular, Visual Studio Code, nest gibi bir çok büyük projenin TypeScript tercih etmesi her geçen gün kullanımının artacağının bir göstergesi. Node.js yaratıcısı Ryan Dahl'ın deyimiyle: “I love Typescript. It is the best thing. It is very pragmatic and well done and approachable”
Vue.js;Benimse;Diller & Kütüphaneler;FALSE;Single Page Application geliştirme kütüphaneleri içinde adaptasyon ve geliştirme kolaylığı avantajlarından ötürü kullanılması tercih edilmelidir.
Sevi Java;Benimse;Diller & Kütüphaneler;FALSE;“Write Once, Use Anywhere”
Entity Framework Core;Benimse;Diller & Kütüphaneler;FALSE; Bir endüstri standardı haline gelmiş Entity Framework, .Net Core uyumlu hale getirildikten sonra GitHub üzerinde açık kaynak projeye dahil olan yüzlerce yazılımcının katkısıyla artık çok daha sağlam ve güvenli. Her geçen gün yeni eklenen veri tabanı destekleri ise hem RDBMS hem de NoSql veritabanları için Entity Framework'ü vazgeçilmez hale getirdi. 
IdentityServer;Benimse;Diller & Kütüphaneler;FALSE; OpenID Connect ve OAuth2.0 gibi endusitri standartları üzerine kurulmuş açık kaynak <a href="https://identityserver.io/">IdentityServer</a> kütüphanesinin, "Authentication", "Single Sign-On/Sign-Out" çözümü olarak kullanılmasını tavsiye ediyoruz.
BatMap;Benimse;Diller & Kütüphaneler;FALSE; <a href="https://github.com/DogusTeknoloji/BatMap">BatMap</a>, Doğuş Teknoloji bünyesinden çıkan hızlı ve kullanımı kolay bir Object Mapper. Özellikle belirli ihtiyaçlar için geliştirilen BatMap döngüsel ilişkiler içeren objeler ile de çalışabiliyor.
xUnit;Benimse;Diller & Kütüphaneler;FALSE;<a href="https://xunit.github.io/">xUnit</a>, .NET Framework için geliştirilen community destekli açık kaynak unit test kütüphanesidir. Kendi alanında son teknoloji olarak kabul görmüştür.
Selenium;Benimse;Diller & Kütüphaneler;FALSE;<a href="https://github.com/SeleniumHQ/selenium">Selenium</a>, Web tarayıcı ve UI Test Otomasyonları için kullanılan açık kaynak araçlar ve kütüphaneler içerir. C# dahil çok sayıda dili destekleyen endüstride genel kabul görmüş bir teknolojidir.
Sevi GoLang;Deneyimle;Diller & Kütüphaneler;TRUE;Zamanla evrimleşmiş dillerdeki varolan sorunları çözmek üzere tasarlanmış Google'ın <a href="https://golang.org/">Go</a> programlama dili, modern donanım mimarilerinden de güç almakta ve günümüz yazılım geliştirme dinamiklerine daha uyumlu, hafif ve microservis mimarilerine yatkın olması ile öne çıkmaktadır. Docker ve Kubernetes'in de üzerinde geliştirildiği Go, son 3 senenin en sevilen 5 dili arasında yer almıştır.
React.js;Deneyimle;Diller & Kütüphaneler;TRUE;Single Page Application geliştirme kütüphaneleri içinde adaptasyon ve geliştirme kolaylığı avantajlarından ötürü kullanılması düşünülebilir.
Pug.js;Deneyimle;Diller & Kütüphaneler;FALSE;HTML markup yerine daha sade olması ve içinde gelen güçlü mixin geliştirme gibi özelliklerinden ötürü kullanımı düşünülebilir.
Webpack;Deneyimle;Diller & Kütüphaneler;FALSE;Frontend uygulamaları geliştirme sürecinde, özellikle SPA uygulamaların bileşenlerinin konfigüre edilmesi ve paketlenmesi için kullanımı düşünülebilir.
Linquest;Deneyimle;Diller & Kütüphaneler;TRUE; <a href="https://github.com/jin-qu/linquest">Linquest</a> özellikle Linq kullanmaya alışkın yazılımcılar için istemci tarafından API çağrısı yapmaya yeni bir soluk getiriyor. Sorgulama altyapısını <a href="https://github.com/jin-qu/jinqu">jinqu</a> ile sağlayarak %98 Linq desteği sunuyor.
Sevi Spring Cloud;Deneyimle;Diller & Kütüphaneler;FALSE;JVM uygulamalarının bulut için kolayca geliştirilmelerini sağlayan ve Spring Boot üzerinde microservislerle ilgili sorunları arka planda halleden Pivotal ürünü. Java geliştiren ve microservis mimarisine geçen takımların mutlaka incelemesi gerektiğini düşünüyoruz.
Dapper;Deneyimle;Diller & Kütüphaneler;FALSE; En popüler ve başarılı Micro ORM çözümlerinden olan <a href="https://stackexchange.github.io/Dapper/">Dapper</a>'ı deneyimlemenizi öneriyoruz.
SCSS;Değerlendir;Diller & Kütüphaneler;TRUE;SCSS, CSS içinde birçok programlama yapısının kullanılabilmesine olanak veren bir CSS ön-işlemcisidir. CSS içinde değişkenler tanımlanmasına, matematiksel operasyonlar gerçekleştirilmesine, döngüler tanımlanabilmesine imkan verir. Bu nedenle CSS yerine kullanılması değerlendirilebilir.
Angular;Değerlendir;Diller & Kütüphaneler;FALSE; İstemci taraflı javascript framework'ü seçilirken <a href="https://angular.io/">Angular</a> da değerlendirmeye dahil edlebilir. Sorunlu bir versiyon geçmişi olması güven kaybettirse de, halen oldukça popüler ve yeni versiyonlarıyla daha stabil bir kullanıma sahip.
Angular.js;Kaçın;Diller & Kütüphaneler;FALSE; Hızlı değişime ve gelişime sahip olan istemci taraflı javascript kütüphaneleri içeirisnde popülerliğini ve güncelliğini yitirmiş, geleceği pek olmayanların kullanımından kaçınılmalı.
Ember.js;Kaçın;Diller & Kütüphaneler;FALSE; Hızlı değişime ve gelişime sahip olan istemci taraflı javascript kütüphaneleri içeirisnde popülerliğini ve güncelliğini yitirmiş, geleceği pek olmayanların kullanımından kaçınılmalı.
Knockout.js;Kaçın;Diller & Kütüphaneler;FALSE; Hızlı değişime ve gelişime sahip olan istemci taraflı javascript kütüphaneleri içeirisnde popülerliğini ve güncelliğini yitirmiş, geleceği pek olmayanların kullanımından kaçınılmalı.
jQuery;Kaçın;Diller & Kütüphaneler;FALSE; Bir döneme damgasını vurmuş jQuery'nin yaptığı neredeyse herşeyi ve çok daha fazlasını yapan kütüphaneler varken ve jQuery ile çalışırken "Seperation of Concerns" prensibinin ihlaili sıkça gerçekleştiğinden, kullanımından kaçınmanızı öneriyoruz.
Backbone.js;Kaçın;Diller & Kütüphaneler;FALSE; Hızlı değişime ve gelişime sahip olan istemci taraflı javascript kütüphaneleri içeirisnde popülerliğini ve güncelliğini yitirmiş, geleceği pek olmayanların kullanımından kaçınılmalı.
3. Parti .Net Core IoC Frameworkler;Kaçın;Diller & Kütüphaneler;FALSE; .Net Core ile birlikte gelen, gayet yeterli ve kullanışlı olan IoC yapısı yerine, çok elzem değil ise, bağımlılık oluşturmamak adına 3. parti bir IoC kütüpanesi kullanılmasını önermiyoruz.